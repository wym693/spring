<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
           http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
           http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context-3.1.xsd
           http://www.springframework.org/schema/aop
           http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
           http://www.springframework.org/schema/tx 
     	   http://www.springframework.org/schema/tx/spring-tx-3.1.xsd"
	default-lazy-init="false" default-autowire="no">

	<!--支持基于注解的配置方式，为@Autowired、@Resource、@PostConstruct、@PreDestroy注解提供支持 -->
	<context:annotation-config />

	<!--支持annotation实现aop，并允许为没有实现接口的类实现切面 -->
	<aop:aspectj-autoproxy proxy-target-class="true" />


	<!--通过导入标签引入外部的配置文件PartA (数据库配置) 和PartB(声明式事务) -->

	<import resource="applicationContextPartA.xml" />
	<import resource="applicationContextPartB.xml" />


	<!--为baseDaoImpl注入hibernateTemplate -->
	<bean id="baseDao" class="org.springframework.orm.hibernate3.BaseDaoImpl"
		abstract="true">
		<property name="hibernateTemplate" ref="hibernateTemplate" />
	</bean>

	<!--所有dao对象，注意dao需要继承baseDao -->
	<bean id="groupDao" class="com.pb.dao.impl.GroupDaoImpl" parent="baseDao"></bean>
	<bean id="userDao" class="com.pb.dao.impl.UserDaoImpl" parent="baseDao"></bean>

	<!--所有service对象，注意service需要注入dao -->
	<bean id="groupService" class="com.pb.service.impl.GroupServiceImpl">
		<property name="groupDao" ref="groupDao" />
	</bean>
	<bean id="userService" class="com.pb.service.impl.UserServiceImpl">
		<property name="userDao" ref="userDao" />
		<property name="groupDao" ref="groupDao" />
	</bean>


	<!--所有action对象，注意action需要注入service -->
	<bean id="groupAction" class="com.pb.action.GroupAction" scope="prototype">
		<property name="groupService" ref="groupService"></property>
	</bean>
	<bean id="userAction" class="com.pb.action.UserAction" scope="prototype">
		<property name="userService" ref="userService"></property>
		<property name="groupService" ref="groupService"></property>
	</bean>

	<!--添加作业 相当于设计普通铃声 -->
	<bean id="countSalaryJob" class="com.pb.quartz.job.CountSalaryJob">
	</bean>
	<!-- 把前面普通Bean配置系统的作业 需要添加org.springframework.context.support包 相当把普通铃声转换为闹钟的铃声 -->
	<bean id="methodInvokingJobDetail"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject" ref="countSalaryJob"></property>
		<property name="targetMethod" value="execute"></property>
	</bean>


	<!-- 设计触发器 相当于设置闹钟的时间 需要添加org.opensymphony.quartz下面quartz-all包 -->
	<bean id="simpleTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerBean">
		<property name="jobDetail" ref="methodInvokingJobDetail"></property>
		<property name="startDelay" value="5000"></property>
		<property name="repeatInterval" value="1000"></property>
		<property name="repeatCount" value="8"></property>

	</bean>
	
	<!-- 当需求比较复杂的时候需要配置cron表达式 -->
	<bean id="cronTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
	     <property name="jobDetail" ref="methodInvokingJobDetail"></property>
	     <property name="cronExpression" value="* * 09 25 11 ? 2014"></property>
	     <property name="startDelay" value="5000"></property>
	</bean>
	
	

	<!-- 注册到系统，相当于启动闹钟 -->
	<bean id="schedualFactoryBean"
		class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="triggers">
			<list>
			<!-- 	<ref local="simpleTrigger" /> -->
				<ref local="cronTrigger" />
			</list>
		</property>
	</bean>




</beans>





